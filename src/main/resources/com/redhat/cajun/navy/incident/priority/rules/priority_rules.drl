package com.redhat.cajun.navy.incident.priority.rules

import com.redhat.cajun.navy.incident.priority.rules.model.IncidentAssignmentEvent;
import com.redhat.cajun.navy.incident.priority.rules.model.IncidentReportedEvent;
import com.redhat.cajun.navy.incident.priority.rules.model.IncidentPriority;
import com.redhat.cajun.navy.incident.priority.rules.model.AveragePriority;

global org.slf4j.Logger logger;

rule "Create AveragePriority fact"
when
    not ( AveragePriority() )
then
    insert ( new AveragePriority() );
end

rule "Create incident priority fact when incident cannot be assigned"
when
    $e: IncidentAssignmentEvent( $i: incident, assigned == false )
    not ( IncidentPriority( incident == $i ) )
then
    logger.debug($i + " : " + drools.getRule().getName());
    insert( new IncidentPriority($i) );
end

rule "Increase priority by one when incident cannot be assigned"
when
    $e: IncidentAssignmentEvent( $i: incident, assigned == false )
    $p: IncidentPriority( incident == $i )
    $a: AveragePriority()
then
    logger.debug($i + " : " + drools.getRule().getName());
    modify ( $p ) {
        setPriority( $p.getPriority() + 1 )
    }
    modify ( $a ) {
        setNeedsEvaluation(true)
    }
    retract( $e );
    logger.debug($i + " : Priority = " + $p.getPriority());

end

rule "Retract incident priority when incident has been assigned"
when
    $e: IncidentAssignmentEvent( $i: incident, assigned == true )
    $p: IncidentPriority( incident == $i )
    $a: AveragePriority()
then
    logger.debug($i + " : " + drools.getRule().getName());
    retract ( $p );
    retract ( $e );
    modify ( $a ) {
        setNeedsEvaluation(true)
    }
end

rule "Average Priority"
when
    $a: AveragePriority( needsEvaluation == true )
    IncidentPriority()
    accumulate( IncidentPriority( $p: priority );  $avg: average( $p ) )
then
    modify ( $a ) {
        setNeedsEvaluation(false),
        setAveragePriority($avg)
    }
    logger.debug("Average Priority: " + $a.getAveragePriority());
end

rule "Average Priority when no IncidentPriority"
when
    $a: AveragePriority( needsEvaluation == true )
    not ( IncidentPriority() )
then
    modify ( $a ) {
        setNeedsEvaluation(false),
        setAveragePriority(0.0)
    }
    logger.debug("Average Priority: " + $a.getAveragePriority());
end

query "incidentPriority" (String i)
   incidentPriority : IncidentPriority( incident == i )
end

query "averagePriority"
   averagePriority : AveragePriority( )
end